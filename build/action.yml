name: 'Build OpenSCAD'
description: 'Build OpenSCAD models and images'
inputs:
  target:
    description: 'Build target(s)'
    type: string
    required: false
    default: 'all'
  command:
    description: 'Command for building'
    type: string
    required: true
    default: 'make -j $(nproc)'
  extra_packages:
    description: 'Install extra packages'
    type: string
    required: false
    default: ''
  use_xvfb:
    description: 'Build under Xvfb'
    type: boolean
    required: false
    default: false
  check_target:
    description: 'Check for empty target'
    type: boolean
    required: false
    default: false

runs:
  using: "composite"
  steps:
    - name: Check for Empty Target
      shell: bash
      run: |
        # Check non-empty target if requested
        if [ '${{ inputs.check_target }}' = 'true' ]; then
          read -a target <<< '${{ inputs.target }}'
          if [ ${#target[@]} -eq 0 ]; then
            echo "::error ::No build target specified"
            exit 1
          fi
        fi
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install OpenSCAD and Xvfb
      shell: bash
      run: |
        # Use apt-get to install OpenSCAD and extra packages
        echo "::group::Install"
        if [ '${{ inputs.use_xvfb }}' = 'true' ]; then
          sudo apt-get install openscad xvfb ${{ inputs.extra_packages }}
        else
          sudo apt-get install openscad ${{ inputs.extra_packages }}
        fi
        echo "::endgroup::"
    - name: OpenSCAD Version
      shell: bash
      run: |
        # Show the OpenSCAD Version
        echo "::group::OpenSCAD Version"
        openscad --version
        echo "::endgroup::"
    - name: Build OpenSCAD
      shell: bash
      run: |
        # Run ${{ inputs.command }} ${{ inputs.target }} (with Xvfb if necessary)
        if [ '${{ inputs.use_xvfb }}' = 'true' ]; then
          echo "::group::Build (with Xvfb)"
          xvfb-run -e /dev/stdout ${{ inputs.command }} ${{ inputs.target }}
          echo "::endgroup::"
        else
          echo "::group::Build"
          ${{ inputs.command }} ${{ inputs.target }}
          echo "::endgroup::"
        fi
